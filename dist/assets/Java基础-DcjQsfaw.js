import{_ as s,o as a,c as n,l}from"./index-DuFSmKpI.js";const p={},o={class:"vp-doc"},e=l(`<h1 id="java基础" tabindex="-1">Java基础 <a class="header-anchor" href="#java基础" aria-hidden="true">#</a></h1><h2 id="基础概念" tabindex="-1">基础概念 <a class="header-anchor" href="#基础概念" aria-hidden="true">#</a></h2><ol><li><p>解释Java中的多线程以及如何实现它。</p><p>在Java中，多线程是指在一个程序中同时执行多个线程的能力。每个线程可以执行不同的任务，这样可以提高程序的执行效率，因为程序的不同部分可以并行执行。</p><p>Java提供了几种实现多线程的方法：</p><p>① 继承Thread类，并重写<code>run()</code>方法，这个方法体就是线程要执行的代码，然后创建这个类，调用其<code>start()</code>方法启动线程。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">com</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">triabin</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ideasy_server</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">junit</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Test</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;"> * 类描述：我的测试类</span></span>
<span class="line"><span style="color:#676E95;"> *</span></span>
<span class="line"><span style="color:#676E95;"> * </span><span style="color:#F78C6C;">@author</span><span style="color:#676E95;"> Triabin</span></span>
<span class="line"><span style="color:#676E95;"> * @date 2024-07-10 03:33:22</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyTest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyThread</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Thread</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Mythread </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> started</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">MyThread</span><span style="color:#A6ACCD;"> mt1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyThread</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">MyThread</span><span style="color:#A6ACCD;"> mt2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyThread</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">MyThread</span><span style="color:#A6ACCD;"> mt3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyThread</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        mt1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//Mythread Thread-0 started</span></span>
<span class="line"><span style="color:#A6ACCD;">        mt2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//Mythread Thread-1 started</span></span>
<span class="line"><span style="color:#A6ACCD;">        mt3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//Mythread Thread-2 started</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>② 实现Runnable接口，重写<code>run()</code>方法，同样地，这个方法体就是此线程要执行的代码。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">com</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">triabin</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ideasy_server</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">junit</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Test</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;"> * 类描述：我的测试类</span></span>
<span class="line"><span style="color:#676E95;"> *</span></span>
<span class="line"><span style="color:#676E95;"> * </span><span style="color:#F78C6C;">@author</span><span style="color:#676E95;"> Triabin</span></span>
<span class="line"><span style="color:#676E95;"> * @date 2024-07-10 03:33:22</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyTest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Runnable</span><span style="color:#A6ACCD;"> myRunnable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我的线程：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Thread</span><span style="color:#A6ACCD;"> t1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">myRunnable</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Thread</span><span style="color:#A6ACCD;"> t2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">myRunnable</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Thread</span><span style="color:#A6ACCD;"> t3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">myRunnable</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        t1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 我的线程：Thread-0</span></span>
<span class="line"><span style="color:#A6ACCD;">        t2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 我的线程：Thread-1</span></span>
<span class="line"><span style="color:#A6ACCD;">        t3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 我的线程：Thread-2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>③ 使用线程池，可以通过<code>ExcutorService</code>来管理线程池，这样可以避免频繁创建和销毁线程所带来的开销，使用线程池可以更有效地管理系统资源。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">com</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">triabin</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ideasy_server</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">junit</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Test</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">util</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">concurrent</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ExecutorService</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">java</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">util</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">concurrent</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Executors</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;"> * 类描述：我的测试类</span></span>
<span class="line"><span style="color:#676E95;"> *</span></span>
<span class="line"><span style="color:#676E95;"> * </span><span style="color:#F78C6C;">@author</span><span style="color:#676E95;"> Triabin</span></span>
<span class="line"><span style="color:#676E95;"> * @date 2024-07-10 03:33:22</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyTest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ExecutorService</span><span style="color:#A6ACCD;"> executor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Executors</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">newFixedThreadPool</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> finalI </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            executor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">submit</span><span style="color:#89DDFF;">(()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">任务</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> finalI </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        executor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shutdown</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;">// 任务1pool-1-thread-2</span></span>
<span class="line"><span style="color:#676E95;">// 任务2pool-1-thread-3</span></span>
<span class="line"><span style="color:#676E95;">// 任务0pool-1-thread-1</span></span>
<span class="line"></span></code></pre></div></li><li><p>描述Java内存模型，特别是堆和栈的区别。</p><p>Java内存模型中，程序中的所有变量都存储在不同的存储区域中，主要包括两个区域：堆（heap）和栈（stack）。</p><ul><li>堆（heap）：堆是Java程序运行时动态分配的内存区域，所有类的实例和数组都在堆上创建。对象的生命周期由垃圾回收（GC）算法管理了。堆内存中的对象可以被多个线程共享，通过共享对象，线程之间可以进行通信。</li><li>栈（stack）：栈是Java程序中用于存储方法调用的信息区域。每当一个方法被调用时，JVM会在栈上创建一个相应的栈帧（Stack Frame），用于存储该方法的局部变量和操作数。栈内存中的数据仅限于方法内部使用，方法一旦返回，其对应的栈帧就会被销毁，内存被回收。</li></ul></li><li><p>什么事Java中的接口和抽象类，它们之间的区别是什么？</p></li><li><p>解释Java中的异常处理机制，并给出一个实际应用的例子。</p></li></ol><h2 id="集合框架" tabindex="-1">集合框架 <a class="header-anchor" href="#集合框架" aria-hidden="true">#</a></h2><ol><li>详细解释ArrayList和LinkedList的数据结构以及性能差异。</li><li>如何实现HashMap的自定义排序？</li><li>解释迭代器（Iterator）和列表迭代器（ListIterator）的区别。</li></ol><h2 id="泛型与类型擦除" tabindex="-1">泛型与类型擦除 <a class="header-anchor" href="#泛型与类型擦除" aria-hidden="true">#</a></h2><ol><li>泛型的好处是什么？</li><li>Java中的泛型是完全类型安全的吗？为什么？</li></ol><h2 id="并发与多线程" tabindex="-1">并发与多线程 <a class="header-anchor" href="#并发与多线程" aria-hidden="true">#</a></h2><ol><li>什么是死锁？如何避免死锁？</li><li>解释并比较synchronized关键字与Lock接口的使用。</li><li>Java中的volatile关键字的作用是什么？它与synchronized的区别在哪里？</li></ol><h2 id="jvm与性能优化" tabindex="-1">JVM与性能优化 <a class="header-anchor" href="#jvm与性能优化" aria-hidden="true">#</a></h2><ol><li>简述JVM的内存区域划分。</li><li>如何通过JVM参数进行性能调优？</li><li>什么事垃圾回收（GC），并简述几种常见的GC算法。</li></ol><h2 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-hidden="true">#</a></h2><ol><li>解释单例模式并用Java实现。</li><li>举例说明工厂模式和抽象工厂模式的应用场景及实现。</li></ol><h2 id="数据库与jdbc" tabindex="-1">数据库与JDBC <a class="header-anchor" href="#数据库与jdbc" aria-hidden="true">#</a></h2><ol><li>JDBC的基本操作流程是什么？如何处理SQLException？</li><li>解释PreparedStatement与Statement的区别，并指出哪个更安全、性能更好。</li></ol><h2 id="框架与库" tabindex="-1">框架与库 <a class="header-anchor" href="#框架与库" aria-hidden="true">#</a></h2><ol><li>Spring框架的核心特性有哪些？</li><li>解释依赖注入（DI）和控制反转（IoC）的概念。</li></ol><h2 id="springmvc的理解" tabindex="-1">SpringMVC的理解 <a class="header-anchor" href="#springmvc的理解" aria-hidden="true">#</a></h2><p>**概念：**SpringMVC是一种基于Java语言开发，实现了Web MVC设计模式，请求驱动类型的轻量级Web框架。<br>采用了MVC架构模式的思想，通过吧Model，View，Controller分离，将Web层进行职责解耦从而把复杂的Web应用分成逻辑清晰的几个组件，在SpriingMVC中有9大重要的组件：</p><ol><li><p>MultipartResolver文件处理器</p><p>对应的初始化方法是<code>initMultipartResolver(context)</code>，用于处理上传请求。</p></li><li><p>LocaleResolver当前换将处理器</p><p>对应的初始化方法是\`\`initLocaleResolver(context)\`，SpringMVC主要有两个地方用到了Locale，一个是ViewResolver视图解析的时候；二是用到国际化资源或者主题的时候。</p></li><li><p>ThemeResolver主热处理器</p><p>其对应的初始化方法是<code>initThemeResolver(context)</code>，用于解析主题，也就是解析样式、图片及它们所形成的显示效果的集合。</p></li><li><p>HandlerMapping处理器映射器</p><p>其对应的初始化方法是<code>initHandlerMappings(context)</code>，在SpringMVC中会有很多请求，每个请求都需要一个Handler处理，HandlerMapping的作用便是找到请求响应的处理器Handler和Interceptor。</p></li><li><p>HandlerAdapter处理器适配器</p><p>对应的初始化方法是<code>initHandlerAdapers(context)</code>，从名字上看，它就是一个适配器，HandlerAdapters主要做的事情就是如何让固定的Servlet处理方法调用灵活的Handler来进行处理。</p></li><li><p>HandlerExceptionResolver异常处理器</p><p>它对应的初始化方法是<code>initHandlerExceptionResolvers(context)</code>，它的主要作用是处理其他组件产生的异常情况。</p></li><li><p>RequestToViewNameTranslator视图名称翻译器</p><p>其对应的初始化方法是<code>initRequestToViewNameTranslator(context)</code>，它的作用是从请求中获取ViewName，有的Handler处理完后并没有设置View，也没有设置ViewName，这时就需要从request中获取，而RequestToViewTranslator就是为request提供狭取ViewName的实现。</p></li><li><p>ViewResolvers页面洁染处理器</p><p>其对应的初始化方法是<code>initViewResolvers(context)</code>，ViewResolvers的主要作用是将String类型的视图名和Locale解析为View类型的视图。</p></li><li><p>FlashMapManager参数传递管理器</p><p>其对应的初始化方法是<code>initFlashMapManager(context)</code>，在实际应用中，为了避免重复提交，我们可以在处理完post请求后重定向到另一个get请求，这个get请求可以用来返回页面青染需要的信息，FlashMap就是用于这种请求重定向场景中的参数传递。</p></li></ol><p>**请求工作流程：**在SpringMVC的九大组件中，涉及请求处理响应的核心组件分别是HandlerMapping、HandlerAdapter、ViewResolver。下图为一次完整的请求中，SpringMVC的完整工作流程：</p><p><img src="https://gitee.com/triabin/img_bed/raw/master/2024/07/31/9739e6074b0852fb322829a82833097b-image-20240731233316947.png" alt="image-20240731233316947"></p><p>HandlerMapping回调用HandlerAdapter，HandlerAdapter会返回ModelAndView，ModelAndView根据用户传入的参数封装为View，交给引擎进行清染。</p><blockquote><p>注意：ModelAndView和View不属于SpringMVC九大组件。</p></blockquote>`,24),t=[e];function r(c,y){return a(),n("div",o,t)}const A=s(p,[["render",r]]);export{A as default};
