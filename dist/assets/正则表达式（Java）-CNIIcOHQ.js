import{_ as t,b as e,o as r,c,d as s,i as n,e as o,w as l,l as p}from"./index-DuFSmKpI.js";const D={},y={class:"vp-doc"},F=p(`<h1 id="正则表达式-java" tabindex="-1">正则表达式（Java） <a class="header-anchor" href="#正则表达式-java" aria-hidden="true">#</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-hidden="true">#</a></h2><ul><li>正则表达式：regular expression =&gt; regex/RegExp/regExp，是对字符串执行模式匹配的技术</li></ul><h2 id="底层原理" tabindex="-1">底层原理 <a class="header-anchor" href="#底层原理" aria-hidden="true">#</a></h2><h3 id="匹配规则" tabindex="-1">匹配规则 <a class="header-anchor" href="#匹配规则" aria-hidden="true">#</a></h3><ul><li><p>使用</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// TestContent</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1998年12月8日，第二代Java平台的企业版J2EE发布。1999年6月，Sun公司发布了第二代Java平台（简称为Java2）的3个版本：J2ME（Java2 Micro Edition，Java2平台的微型版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition，Java 2平台的标准版），应用于桌面环境；J2EE（Java 2Enterprise Edition，Java 2平台的企业版），应用于基于Java的应用服务器。Java 2平台的发布，是Java发展过程中最重要的一个里程碑，标志着Java的应用开始普及。</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Pattern</span><span style="color:#A6ACCD;"> pattern </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">regex</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Matcher</span><span style="color:#A6ACCD;"> matcher </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matcher</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>执行过程（原理）</p><ol><li>执行matcher.find()方法时，根据指定正则遍历字符串的Character[]数组，找到（定位）符合规则的字串；</li><li>将匹配到的符合正则的子串索引记录到matcher对象的int[] groups数组，<code>起始索引</code>记录到groups[0]，<code>结束索引+1</code>记录到groups[1]；</li><li>将oldLast的值同步更新为<code>结束索引+1</code>，以便下次执行find()方法时从oldLast开始匹配。</li></ol></li></ul><h3 id="分组" tabindex="-1">分组 <a class="header-anchor" href="#分组" aria-hidden="true">#</a></h3><ul><li><p>使用：使用小括号</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// TestContent</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1998年12月8日，第二代Java平台的企业版J2EE发布。1999年6月，Sun公司发布了第二代Java平台（简称为Java2）的3个版本：J2ME（Java2 Micro Edition，Java2平台的</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">微型版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition，Java 2平台的标准版），应用于桌面环境；J2EE（Java 2Enterprise Edition，Java 2平台的</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">企业版），应用于基于Java的应用服务器。Java 2平台的发布，是Java发展过程中最重要的一个里程碑，标志着Java的应用开始普及。9889</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d)(</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Pattern</span><span style="color:#A6ACCD;"> pattern </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">regex</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Matcher</span><span style="color:#A6ACCD;"> matcher </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matcher</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">匹配到：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 或matcher.group(0)</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">，第一组：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">，第二组：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><strong><img src="https://gitee.com/triabin/img_bed/raw/master/2024/08/07/c1b602a2914fdd2c9540aa80b242b022-image-20240807114235918.png" alt="image-20240807114235918"></strong></p></li><li><p>执行过程（原理）</p><ol><li><p>执行matcher.find()方法时，根据指定正则遍历字符串的Character[]数组，找到（定位）符合规则的字串；</p></li><li><p>将匹配到的符合正则的子串索引记录到matcher对象的int[] groups数组，例如示例中的<code>(\\\\d\\\\d)(\\\\d\\\\d)</code>，一个小括号为一个分组</p><p>2.1 groups[0]=<code>子串起始索引</code>，groups[1]=<code>子串结束索引+1</code></p><p>2.2 groups[2]=<code>组1起始索引</code>，groups[3]=<code>组1结束索引+1</code></p><p>2.3 groups[4]=<code>组2起始索引</code>，groups[5]=<code>组2结束索引+1</code></p><p>……</p></li><li><p>将oldLast的值同步更新为<code>结束索引+1</code>，以便下次执行find()方法时从oldLast开始匹配。</p></li></ol></li></ul><h2 id="元字符-matacharacter" tabindex="-1">元字符（Matacharacter） <a class="header-anchor" href="#元字符-matacharacter" aria-hidden="true">#</a></h2><h3 id="转义符" tabindex="-1">转义符 <a class="header-anchor" href="#转义符" aria-hidden="true">#</a></h3><ul><li><p>转义符（\\\\），使用正则检索某些特殊字符（本身在正则表达式中有特殊含义的字符），需要用转义符进行转义，避免解释为其正则表达式中的特殊含义。</p><p>Tips：其他语言中（非Java），转义符为<code>\\</code></p></li><li><p>需要用到转义符的字符：<code>.*+()$/\\?[]^{}</code></p></li></ul><h3 id="字符匹配符" tabindex="-1">字符匹配符 <a class="header-anchor" href="#字符匹配符" aria-hidden="true">#</a></h3><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>解释</th></tr></thead><tbody><tr><td>[]</td><td>可接收的字符列表</td><td>[efgh]</td><td>匹配e，f，g，h中任意一个字符</td></tr><tr><td>[^]</td><td>不接受的字符列表</td><td>[^abc]</td><td>除a，b，c意外的任意字符</td></tr><tr><td>-</td><td>连字符</td><td>A-Z</td><td>任意大写字母</td></tr><tr><td>.</td><td>匹配除了\\n以外的任意字符</td><td>a..b</td><td>以a开头，b结尾，中间包括两个任意字符的字符串</td></tr><tr><td>\\\\d</td><td>匹配单个数字字符，[0-9]</td><td><code>\\\\\\\\d{3}(\\\\\\\\d)?</code></td><td>包含3个或4个数字的字符串</td></tr><tr><td>\\\\D</td><td>匹配单个非数字字符，[^0-9]</td><td><code>\\\\\\\\D(\\\\\\\\d)*</code></td><td>以单个非数字字符开头，后接任意个数数字的字符串</td></tr><tr><td>\\\\w</td><td>匹配单个字母、数字、下划线，[a-zA-Z0-9_]</td><td><code>\\\\\\\\d{3}\\\\\\\\w{4}</code></td><td>以3个数字开头，后接任意4个字母、数字或下划线的字符串</td></tr><tr><td>\\\\W</td><td>匹配单个除字母、数字、下划线以外的字符，[^a-zA-Z0-9_]</td><td><code>\\\\\\\\W+\\\\\\\\d{2} </code></td><td>已至少一个非字母、数字或下划线开头，2个数字字符结尾的字符串</td></tr><tr><td>\\\\s</td><td>匹配任意空白字符（空格、制表符等）</td><td></td><td></td></tr><tr><td>\\\\S</td><td>匹配任意非空白字符</td><td></td><td></td></tr></tbody></table><p>Java正则表达式默认区分大小写，可以通过<code>(?i)</code>实现后面的正则忽略大小写（ignore case）：</p><ul><li><code>(?i)abc</code>表示abc都不区分大小写</li><li><code>a(?i)bc</code>表示bc不区分大小写</li><li><code>a((?i)b)c</code>表示b不区分大小写</li><li><code>Pattern pattern = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);</code>也表示不区分大小写</li></ul><h3 id="选择匹配符" tabindex="-1">选择匹配符 <a class="header-anchor" href="#选择匹配符" aria-hidden="true">#</a></h3><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>解释</th></tr></thead><tbody><tr><td>|</td><td>匹配“|”之前或之后的表达式</td><td>ab|bc</td><td>ab或bc</td></tr></tbody></table><h3 id="限定符" tabindex="-1">限定符 <a class="header-anchor" href="#限定符" aria-hidden="true">#</a></h3><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>指定字符重复0次或多次，<code>{0,} </code></td><td>(abc)*</td><td>包含任意个数abc的字符串</td></tr><tr><td>+</td><td>指定字符重复1次或多次，<code>{1,}</code></td><td>m+(abc)*</td><td>至少以1个m开头，后接任意个数abc的字符串</td></tr><tr><td>？</td><td>指定字符串重复0次或1次，<code>{0,1}</code></td><td>m+abc?</td><td>至少以1个m开头，后接ab或abc的字符串</td></tr><tr><td><code>{n}</code></td><td>只能输入n个字符</td><td><code>[abcd]{3}</code></td><td>由abcd中的字母组成的长度为3的字符串</td></tr><tr><td><code>{n,}</code></td><td>指定至少n个匹配</td><td><code>[abcd]{3,}</code></td><td>由abcd中的字母组成的长度不小于3的字符串</td></tr><tr><td><code>{n,m}</code></td><td>至少n个但不多于m个匹配</td><td><code>[abcd]{3,5}</code></td><td>由abcd中的字母组成的长度为[3,5]的字符串</td></tr></tbody></table><p>**注意：**Java正则表达式默认为贪婪匹配，即尽可能匹配多的，所有在“aaaaaa”中匹配<code>&quot;a{3,4}&quot;</code>只会返回一次4个a，而不是两次3个a。</p><h3 id="定位符" tabindex="-1">定位符 <a class="header-anchor" href="#定位符" aria-hidden="true">#</a></h3><ul><li>定位符，规定要匹配的字符串出现的位置，比如在字符串的开始还是结束位置。</li></ul>`,22),A=s("thead",null,[s("tr",null,[s("th",null,"符号"),s("th",null,"含义"),s("th",null,"示例"),s("th",null,"说明"),s("th",null,"匹配输入")])],-1),C=s("tr",null,[s("td",null,"^"),s("td",null,"指定起始字符"),s("td",null,"^[0-9]+[a-z]*"),s("td",null,"以至少1个数字开头，后接任意个数小写字母的字符串"),s("td",null,"123、6aa、555edf")],-1),d=s("tr",null,[s("td",null,"$"),s("td",null,"指定结束字符"),s("td",null,"^[0-9]\\-[a-z]+$"),s("td",null,"以1个数字开头，后接连字符“-”，并以至少1个小写字母结尾的字符串"),s("td",null,"1-a")],-1),i=s("td",null,"\\\\b",-1),u=s("td",null,"匹配目标字符串的边界",-1),h=s("td",null,"han\\\\b",-1),q=s("td",null,"这里说的字符串边界是指字串间有空格，或者目标字符串的结束位置",-1),E=s("td",null,"\\\\B",-1),g=s("td",null,"匹配目标字符串的非边界",-1),m=s("td",null,"han\\\\B",-1),b=s("td",null,"和\\\\b相反",-1),v=p(`<h2 id="常用分组" tabindex="-1">常用分组 <a class="header-anchor" href="#常用分组" aria-hidden="true">#</a></h2><h3 id="捕获分组" tabindex="-1">捕获分组 <a class="header-anchor" href="#捕获分组" aria-hidden="true">#</a></h3><table><thead><tr><th>常用分组构造形式</th><th>说明</th></tr></thead><tbody><tr><td>(pattern)</td><td>非命名捕获，捕获匹配的字符串，编号为0的第一个捕获由整个正则表达式模式匹配的文本，其他捕获结果则根据左括号的顺序从1开始自动编号。</td></tr><tr><td>(?&lt;name&gt;pattern)</td><td>命名捕获，将匹配的子字符串捕获到一个组名称或编号名称中，用于name的字符串不能包含任何标点符号，并且不能以数字开头 ，可以使用单引号代替尖括号，例如）(?&#39;name&#39;)</td></tr></tbody></table><ul><li><p>命名分组，即可以给分组取名，例如<code>&quot;(?&lt;组名&gt;\\\\d\\\\d)(\\\\d\\\\d)&quot;</code></p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// TestContent</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hanshunping s7789 nn1189han</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(?&lt;g1&gt;</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d)(?&lt;g2&gt;</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Pattern</span><span style="color:#A6ACCD;"> pattern </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">regex</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Matcher</span><span style="color:#A6ACCD;"> matcher </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matcher</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">匹配到：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 或matcher.group(0)</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">，第一组：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">，第一组[通过组名]：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">g1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">，第二组：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">，第二组[通过组名]：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">g2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul><h3 id="非捕获分组" tabindex="-1">非捕获分组 <a class="header-anchor" href="#非捕获分组" aria-hidden="true">#</a></h3><table><thead><tr><th>常用分组构造形式</th><th>说明</th></tr></thead><tbody><tr><td>(?:pattern)</td><td>匹配pattern，但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用“or”字符(|)组合模式部件的情况很有用，例如，&#39;industr(?:y|ies)是比&#39;industry|insdusties&#39;更经济的表达式</td></tr><tr><td>(?=pattern)</td><td>它是一个非捕获匹配，例如&#39;Windows (?=95|98|NT|2000)&#39;匹配&#39;Windows 2000&#39;中的&#39;Windows&#39;，但不匹配&#39;Windows 3.1&#39;中的&#39;Windows&#39;。</td></tr><tr><td>(?!pattern)</td><td>该表达式匹配不处于匹配pattern的字符串的起始点的搜索字符串。他是一个非捕获匹配。例如，&#39;Windows (?!95|98|NT|2000)&#39;匹配&#39;Windows 3.1&#39;中的&#39;Windows&#39;，但不匹配&#39;Windows 2000&#39;中的&#39;Windows&#39;</td></tr></tbody></table><ul><li><p>(?:pattern)，使用后，括号内容不会被分组（非捕获）</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// TestContent</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">迪迦奥特曼，迪迦奥特曼戴拿奥特曼，盖亚奥特曼，阿古茹奥特曼</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(?:迪迦|盖亚)奥特曼</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Pattern</span><span style="color:#A6ACCD;"> pattern </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">regex</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Matcher</span><span style="color:#A6ACCD;"> matcher </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matcher</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">匹配到：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 或matcher.group(0)</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>(?=pattern)，括号内容不展示，不分组，不可前置，例如<code>&quot;（?=迪迦|盖亚）奥特曼&quot;</code>匹配不到内容</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// TestContent</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">西门吹雪拿刀砍死了西门庆，西门大官人</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">西门(?=吹雪|庆)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Pattern</span><span style="color:#A6ACCD;"> pattern </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">regex</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Matcher</span><span style="color:#A6ACCD;"> matcher </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matcher</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">匹配到：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 或matcher.group(0)</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li><li><p>(?!pattern)，与<code>（?=pattern）</code>相反，不匹配符合pattern的内容，不分组，不可前置</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// TestContent</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">西门吹雪拿刀砍死了西门庆又名西门大官人</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">西门(?!吹雪|庆)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Pattern</span><span style="color:#A6ACCD;"> pattern </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">regex</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Matcher</span><span style="color:#A6ACCD;"> matcher </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matcher</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">匹配到：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 或matcher.group(0)</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul><h2 id="正则表达式元字符详细说明" tabindex="-1">正则表达式元字符详细说明 <a class="header-anchor" href="#正则表达式元字符详细说明" aria-hidden="true">#</a></h2><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>\\</td><td>将下一个字符标记为特殊字符、文本、反向引用或八进制转义符。例如，&quot;n&quot;匹配字符&quot;n&quot;，&quot;\\n&quot;匹配换行符，序列&quot;\\\\\\\\&quot;匹配&quot;\\\\&quot;，&quot;\\\\(&quot;匹配&quot;(&quot;。</td></tr><tr><td>^</td><td>匹配字符串开始的位置，如果设置了RegExp对象的Multiline属性，^还会与&quot;\\n&quot;或&quot;\\r&quot;之后的位置匹配。</td></tr><tr><td>$</td><td>匹配字符串结尾的位置，如果设置了RegExp对象的Multiline属性，$还会与&quot;\\n&quot;或&quot;\\r&quot;之前的位置匹配。</td></tr><tr><td>*</td><td>0次或多次匹配匹配前面的字符或子表达式。例如，zo*匹配&quot;z&quot;和&quot;zoo&quot;。*等效于<code>{0,}</code>。</td></tr><tr><td>+</td><td>1次或多次匹配匹配前面的字符或子表达式。例如，zo+匹配&quot;zo&quot;和&quot;zoo&quot;，但与&quot;z&quot;不匹配。+等效于<code>{1,}</code>。</td></tr><tr><td>?</td><td>0次或1次匹配匹配前面的字符或子表达式。例如，&quot;do(es)?&quot;匹配&quot;do&quot;或&quot;does&quot;，?等效于<code>{0,1}</code>。</td></tr><tr><td><code>{n}</code></td><td>n是非负整数，正好匹配n次。例如，&quot;<code>o{2}</code>&quot;与&quot;Bob&quot;中的&quot;o&quot;不匹配，但与&quot;food&quot;匹配。</td></tr><tr><td><code>{n,}</code></td><td>n是非负整数，至少匹配n次。例如，&quot;o{2,}&quot;与&quot;Bob&quot;不匹配，但与&quot;foooood&quot;匹配（所有o），&quot;<code>o{1,}</code>&quot;等效于&quot;o+&quot;，&quot;<code>o{0,}</code>&quot;等效于&quot;o*&quot;。</td></tr><tr><td><code>{n,m}</code></td><td>m和n是非负整数，其中n&lt;=m，匹配至少n次，最多m次。例如，&quot;<code>o{1,3}</code>&quot;匹配&quot;fooooood&quot;中的头三个o，&quot;<code>o{0,1}</code>&quot;等效于&quot;o?&quot;。<strong>注意：逗号和数字之间不能有空格。</strong></td></tr><tr><td>[限定符]?</td><td>当此字符紧随在限定符(*、+、?、<code>{n}</code>、<code>{n,}</code>、<code>{n,m}</code>)后时，匹配模式是非贪心的，非贪心匹配模式匹配能搜索到的尽可能短的字符串，默认的贪心匹配模式则匹配能匹配到的尽可能长的字符串。例如，在字符串&quot;oooo&quot;中，&quot;o+?&quot;能匹配到4次单个o，而&quot;o+&quot;只能匹配到1次4个o。</td></tr><tr><td>.</td><td>匹配除&quot;\\r\\n&quot;之外的任何单个字符，若要匹配包含&quot;\\r\\n&quot;在内的任意字符，使用诸如&quot;[\\s\\S]&quot;之类的模式。</td></tr><tr><td>(pattern)</td><td>匹配pattern并捕获该匹配的子表达式，可以使用$0...$9属性从结果“匹配”集合中检索捕获的匹配，若要匹配括号字符()，可使用转义符。</td></tr><tr><td>(?:pattern)</td><td>匹配pattern但不捕获该匹配的子表达式，即他是一个非捕获匹配，不存储供以后使用的匹配，这对于用&quot;or&quot;字符（|）组合模式部件的情况很有用。例如，&quot;industr(?:y|ies)&quot;是比&quot;industry|industies&quot;更经济的表达式（不用比较整个单词，()不用分组存储分组数据）。</td></tr><tr><td>(?=pattern)</td><td>执行正向预测先行搜索的子表达式（不可前置），该表达式匹配储与匹配pattern字符串的七十点的字符串，它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，&quot;Windows (?=95|98|NT|2000)&quot;匹配与括号中pattern连接的字符串中的Windows，不匹配与其他Windows，例如，&quot;Windows 3.1&quot;中的Windows。</td></tr><tr><td>(?!pattern)</td><td>执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配pattern的字符串的起始点的搜索字符串，它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，&quot;Windows (?!95|98|NT|2000)&quot;匹配&quot;Windows 3.1&quot;中的Windows，但不匹配&quot;Windows 2000&quot;中的Windows。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符串后。</td></tr><tr><td>x|y</td><td>匹配x或y。例如，&quot;z|food&quot;匹配&quot;z&quot;或&quot;food&quot;，&quot;(z|f)ood&quot;匹配&quot;zood&quot;或&quot;food&quot;。</td></tr><tr><td>[xyz]</td><td>字符集，匹配包含的任意一个字符。例如，&quot;[abc]&quot;匹配&quot;plain&quot;中的&quot;a&quot;。</td></tr><tr><td>[^xyz]</td><td>反向字符集，匹配未包含的任何字符。例如，&quot;[abc]&quot;匹配&quot;plain&quot;中的&quot;p&quot;，&quot;l&quot;，&quot;i&quot;，&quot;n&quot;。</td></tr><tr><td>[a-z]</td><td>字符范围，匹配指定范围内的任何字符。例如，&quot;[a-z]&quot;匹配&quot;a&quot;到&quot;z&quot;范围内的任何小写字母。</td></tr><tr><td>[^a-z]</td><td>反向范围字符，匹配不在指定范围内的任何字符。例如，&quot;[^a-z]&quot;匹配任何不在&quot;a&quot;到&quot;z&quot;范围内的字符。</td></tr><tr><td>\\b</td><td>匹配一个字边界，即字与空格间的位置。例如，&quot;er\\b&quot;匹配&quot;never&quot;中的&quot;er&quot;，但不匹配&quot;verb&quot;中的&quot;er&quot;。</td></tr><tr><td>\\B</td><td>非字边界匹配。例如&quot;er\\B&quot;匹配&quot;verb&quot;中的&quot;er&quot;，但不匹配&quot;never&quot;中的&quot;er&quot;。</td></tr><tr><td>\\cx</td><td>匹配x指示的控制字符。例如，\\cM匹配Control-M或回车符。<strong>x的值必须在A-Z或a-z之间，否则\\c意为&quot;c&quot;字符本身</strong></td></tr><tr><td>\\d</td><td>数字字符匹配，等效于[0-9]。</td></tr><tr><td>\\D</td><td>非数字字符匹配，等效于[^0-9]。</td></tr><tr><td>\\f</td><td>换页符匹配，等效于\\x0c和\\cL。</td></tr><tr><td>\\n</td><td>换行符匹配，等效于\\x0a和\\cJ。</td></tr><tr><td>\\r</td><td>匹配一个回车符，等效于\\x0d和\\cM</td></tr><tr><td>\\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等，与[\\f\\n\\r\\t\\v]等效。</td></tr><tr><td>\\S</td><td>匹配任何非空白字符，与[^\\f\\n\\r\\t\\v]等效。</td></tr><tr><td>\\t</td><td>制表符匹配，与\\x09和\\cI匹配。</td></tr><tr><td>\\v</td><td>垂直制表符匹配，与\\x0b和\\cK等效。</td></tr><tr><td>\\w</td><td>匹配任何字符类字符， 包括下划线， 与&quot;[A-Za-z0-9_]&quot;等效。</td></tr><tr><td>\\W</td><td>与任何非单词字符匹配，与&quot;[^A-Za-z0-9_]&quot;等效。</td></tr><tr><td>\\xn</td><td>匹配n，此处的n是一个十六进制转义码， 十六进制转义码必须正好是两位数长。例如，&quot;\\x41&quot;匹配&quot;A&quot;，&quot;\\041&quot;与&quot;\\x04&quot;&amp;&quot;1&quot;等效。允许在正则表达式中使用ASCII码。</td></tr><tr><td>\\num</td><td>匹配num，此处的num是一个正整数，到捕获匹配的反向引用。例如，&quot;(.)\\1&quot;匹配两个连续的相同字符。</td></tr><tr><td>\\n</td><td>标识一个八进制转义码或反向引用，如果\\n前面至少有n个捕获子表达式，那么n是反向引用，否则，如果n是八进制数(0-7)，那么n是八进制转义码。</td></tr><tr><td>\\nm</td><td>标识一个八进制转义码或反向引用，如果\\nm前面至少有nm个捕获表达式，那么nm是反向引用；如果\\nm前面至少有n个捕获，则n是反向引用，后面跟有字符m。如果上述两种情况都不存在，则\\nm是匹配八进制nm，其中n和m是八进制数字(0-7)。</td></tr><tr><td>\\nml</td><td>当n是八进制数(0-3)，m和l是八进制数(0-7)时，匹配八进制转义码nml。</td></tr><tr><td>\\un</td><td>匹配n，其中n时以四位十六进制数表示的Unicode字符。例如，\\u00A9匹配版权符号（©）。</td></tr></tbody></table><h3 id="非贪婪匹配" tabindex="-1">非贪婪匹配 <a class="header-anchor" href="#非贪婪匹配" aria-hidden="true">#</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// TestContent</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello111111 ok</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// String regex = &quot;\\\\d+&quot;; // 默认为贪婪匹配</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d+?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 限定符后加&quot;?&quot;改为非贪婪匹配</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Pattern</span><span style="color:#A6ACCD;"> pattern </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">regex</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Matcher</span><span style="color:#A6ACCD;"> matcher </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matcher</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">匹配到：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 或matcher.group(0)</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="正则表达式三个常用的类" tabindex="-1">正则表达式三个常用的类 <a class="header-anchor" href="#正则表达式三个常用的类" aria-hidden="true">#</a></h2><p><code>java.util.regex</code>包主要包括Pattern、Matcher和PatternSyntaxException三个类：</p><ul><li>Pattern类，Pattern对象是一个正则表达式对象，Pattern类没有公共的构造方法，通过调用其公共静态方法，返回Pattern对象，该方法接收一个正则表达式作为它的第一个参数，比如：<code>Pattern pattern = Pattern.compile(regex);</code></li><li>Matcher类，Matcher对象是对输入字符串进行解释和匹配的引擎，与Pattern类一样，Matcher也没有公共构造方法，通过调用Pattern对象的matcher方法来获取Matcher对象</li><li>PatternSyntaxException类，PatternSyntaxException是一个非强制异常类，它表示一个正则表达式模式中的语法错误</li></ul><h3 id="pattern" tabindex="-1">Pattern <a class="header-anchor" href="#pattern" aria-hidden="true">#</a></h3><ul><li><p>matchers()方法，整体匹配</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// TestContent</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> content1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">18288888888</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> content2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">18288888888打号机13488888888</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^1[3458]</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d{9}$</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">content1是电话号码：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> Pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matches</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">regex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> content1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">content2是电话号码：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> Pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">matches</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">regex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> content2</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul><h3 id="matcher" tabindex="-1">Matcher <a class="header-anchor" href="#matcher" aria-hidden="true">#</a></h3><ul><li><p>方法一览</p><table><thead><tr><th>方法及说明</th></tr></thead><tbody><tr><td>public int start() 返回前匹配的初始索引</td></tr><tr><td>public int start(int group) 返回在以前的匹配操作空间，由给定组所捕获的子序列的初始索引</td></tr><tr><td>public int end() 返回最后匹配字符后的偏移量</td></tr><tr><td>public int end(int group) 返回在以前的匹配操作空间，由给定组所捕获的子序列最后字符之后的偏移量</td></tr><tr><td>public boolean lookingAt() 尝试从区域开头开始的输入序列与该模式匹配</td></tr><tr><td>public boolean find() 尝试查找与该模式匹配的输入序列的下一个子序列</td></tr><tr><td>public boolean find(int start) 重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列</td></tr><tr><td>public boolean matchers() 尝试将整个区域与该模式匹配</td></tr></tbody></table><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// TestContent</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello edu jack tom hello smith hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Matcher</span><span style="color:#A6ACCD;"> matcher </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">regex</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">matcher</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 匹配结果起始索引</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 匹配结果结束索引+1（偏移量）</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello.*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">matcher</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">matches</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 整体匹配，matches()判断是否满足整个规则，true</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replaceAll</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">替换后的值</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 不改变原字符串，返回替换后的字符串</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul><h3 id="patternsyntaxexception" tabindex="-1">PatternSyntaxException <a class="header-anchor" href="#patternsyntaxexception" aria-hidden="true">#</a></h3><p>非强制异常</p><h2 id="反向引用" tabindex="-1">反向引用 <a class="header-anchor" href="#反向引用" aria-hidden="true">#</a></h2><ul><li><p>需求</p><blockquote><p>找出一段文本中，所有4个数字连在一起的子串，这些子串需满足第1位于第4为相同，第2位于第3位相同</p></blockquote></li></ul><p><strong>1. 分组</strong></p><p>我们可以用圆括号组成一个比较复杂的匹配模式，那么一个圆括号的部分可以看做是一个子表达式/分组。</p><p><strong>2. 捕获</strong></p><p>把正则表达式中子表达式/分组匹配的内容保存到内存中以数字编号或显式命名的组里，方便后面引用，从左到右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。组0代表整个正则表达式。</p><p><strong>3. 反向引用</strong></p><p>圆括号的内容被捕获后，可以在这个括号后被引用，从而写出一个比较实用的匹配模式，称为<strong>反向引用</strong>，这种引用既可以是正则表达式内部，也可以是在正则表达式外部，内部反向引用<code>\\\\分组号</code>，外部反向引用<code>$分组号</code>。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// TestContent</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1122111112321-333999111555555688</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// String regex = &quot;(\\\\d)\\\\1&quot;; // 匹配2个连续相同的数字</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// String regex = &quot;(\\\\d)\\\\1{4}&quot;; // 匹配5个连续相同的数字</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// String regex = &quot;(\\\\d)(\\\\d)\\\\2\\\\1&quot;; // 匹配个位与千位相同，十位与百位相同的数字</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d{5}-(</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d)</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">1{2}(</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d)</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">2{2}(</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">d)</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">3{2}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 字符串中检索商品编号，形如123321-333999111这样的号码，要求：满足前面是一个5位数，然后一个“-”号，然后是一个9位数，连续的3位相同</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Matcher</span><span style="color:#A6ACCD;"> matcher </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">regex</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">matcher</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> group </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">第</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">group </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">组：start: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, end: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, value: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="结巴去重案例" tabindex="-1">结巴去重案例 <a class="header-anchor" href="#结巴去重案例" aria-hidden="true">#</a></h3><blockquote><p>把类似“我……我要……学学学学……变成Java！”通过正则表达式修改为“我要学编程Java！”。</p></blockquote><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// TestContent</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我……我要……学学学学……编程Java！</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 1、去除省略号</span></span>
<span class="line"><span style="color:#A6ACCD;">    content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> content</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replaceAll</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">…</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 2、去掉重复的字</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(.)</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">1+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 2.1 找到所有连续重复字</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Matcher</span><span style="color:#A6ACCD;"> matcher </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pattern</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">regex</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">matcher</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> group </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">第</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">group </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">组：start: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, end: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, value: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">group</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 2.2 将匹配到的值替换为的第一个分组匹配的到的内容（重复字第一个字）</span></span>
<span class="line"><span style="color:#A6ACCD;">    content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> matcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replaceAll</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="string类中使用正则表达式" tabindex="-1">String类中使用正则表达式 <a class="header-anchor" href="#string类中使用正则表达式" aria-hidden="true">#</a></h2><ul><li>public String replaceAll(String regex, String replacement)</li><li>public boolean matches(String regex)</li><li>public String[] split(String regex)</li></ul>`,34);function x(S,f){const a=e("font");return r(),c("div",y,[F,s("table",null,[A,s("tbody",null,[C,d,s("tr",null,[i,u,h,q,s("td",null,[n("hanshunpingsp"),o(a,{color:"yellow"},{default:l(()=>[n("han")]),_:1}),n(" nn"),o(a,{color:"yellow"},{default:l(()=>[n("han")]),_:1})])]),s("tr",null,[E,g,m,b,s("td",null,[o(a,{color:"yellow"},{default:l(()=>[n("han")]),_:1}),n("shunpingsphan nnhan")])])])]),v])}const J=t(D,[["render",x]]);export{J as default};
